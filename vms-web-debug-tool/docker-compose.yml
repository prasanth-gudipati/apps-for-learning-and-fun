version: '3.8'

services:
  # Flask Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - MONGODB_URL=mongodb://mongo:27017/vms_debug
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./app:/app
    depends_on:
      - mongo
      - redis
    networks:
      - vms-network
    restart: unless-stopped

  # MongoDB Database
  mongo:
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=vms_debug
    volumes:
      - mongo_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - vms-network
    restart: unless-stopped

  # Mongo Express - Web UI for MongoDB
  mongo-express:
    image: mongo-express:1.0.2
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=vms123
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
    depends_on:
      - mongo
    networks:
      - vms-network
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vms-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx reverse proxy (optional for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - vms-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  mongo_data:
  redis_data:


networks:
  vms-network:
    driver: bridge
